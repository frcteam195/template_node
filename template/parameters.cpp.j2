#include "{{node_name}}/parameters.hpp"
#include "ck_utilities_node/node_handle.hpp"
rclcpp::Node* node_handle = nullptr;

parameters_t Parameters;

void load_parameters(rclcpp::Node* node)
{
{% for param_name,type in params.items() %}
    node->declare_parameter("{{param_name}}", {{type}});
{% endfor %}

{% for param_name,type in lang_types.items() %}
    Parameters.{{param_name.replace('__dyn', '')}} = node->get_parameter("{{param_name}}").get_value<{{type}}>();
{% endfor %}
}

ParameterizedNode::ParameterizedNode(std::string node_name) : rclcpp::Node(node_name)
{
    node_handle = this;
    load_parameters(this);

    auto on_set_callback = [](std::vector<rclcpp::Parameter> parameters)
    {
        rcl_interfaces::msg::SetParametersResult result;
        result.successful = true;

        for (const auto & param : parameters)
        {
{%for param_name, type in params.items() %}
{% if not param_name.endswith('__dyn') %}
            if (param.get_name() == "{{param_name}}")
            {
                result.successful = false;
                result.reason = "Parameter '{{param_name}}' is not reconfigurable.";
                break;
            }
{% endif %}
{% endfor %}
        }

        return result;
    };

    auto post_set_callback = [this](const std::vector<rclcpp::Parameter>& parameters)
    {
        for (const auto & param : parameters)
        {
{% for param_name, type in params.items() %}
{% if param_name.endswith('__dyn') %}
            if (param.get_name() == "{{param_name}}")
            {
                Parameters.{{param_name.replace('__dyn', '')}} = param.get_value<{{type}}>();
                RCLCPP_INFO(this->get_logger(), "Updated the value of '{{param_name}}'\n");
            }
{% endif %}
{% endfor %}
        }
    };

    on_set_handle_ = this->add_on_set_parameters_callback(on_set_callback);
    post_set_handle_ = this->add_post_set_parameters_callback(post_set_callback);
}
